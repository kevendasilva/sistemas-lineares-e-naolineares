1.  /* Matriz escolhida (estendida)
2.   * m = [[ 8,   -4,    0, -1,    0,    0,  20],
3.   *      [ 0, -2.5,  4.5,  0,    0,   -2,  14],
4.   *      [ 0,   -5,    0, -2,  8.5, -1.5, -30],
5.   *      [-4, 11.5, -2.5,  0,   -5,    0, -12],
6.   *      [-1,    0,    0,  3,   -2,    0,   8],
7.   *      [ 0,    0,   -2,  0, -1.5,    8,   0]]
8.   * 
9.   * Solução numérica estimada
10.  * (como não possuo nenhuma estimativa inicial, todas as incógnitas são iguais a zero)
11.  * initial_solution = [0, 0, 0, 0, 0, 0]
12.  *
13.  * Erro escolhido (e) = 0.03
14.  * 
15.  * A variável 'ite' foi utilizada com contador de iterações
16.  * Quando o método 'jacobi' é chamado, ite = 0
17.  */
18.
19.  Inicio algoritmo
20.
21.    FUNÇÃO err_x_i(initial_solution, next_solution)
22.      // Vetor inicialmente vazio
23.      err_x_i = []
24.      // Percorrendo cada incógnita
25.      num_of_interations = tamanho_de(initial_solution)
26.      // A variável 'i' varia de 0 até (num_of_interations - 1)
27.      PARA num_of_interations VEZES, FAÇA |i|
28.        // Caso o erro relativo estimado seja menor que 'e' (e = 0.000001)
29.        SE ((next_solution[i] - initial_solution[i]) / initial_solution[i]).abs < 0.000001
30.          // Caso o erro da incógnita seja menor que o erro escolhido, o vetor recebe o valor lógico "true"
31.          err_x_i.push(true)
32.        SENÃO
33.          err_x_i.push(false) # Caso contrário, recebe "false"
34.        FIM SE
35.      FIM PARA
36.      RETORNE err_x_i
37.    FIM FUNÇÃO
38.
39.    FUNÇÃO jacobi(initial_solution, matrix, ite)
40.      // Contandor de iterações
41.      ite = ite + 1
42.      // Vetor que conterá a próxima solução (inicialmente vazio)
43.      next_solution = []
44.      n = matrix.num_of_lines - 1
45.      // A variável 'i' varia de 0 a n, ou seja, de 0 a matrix.num_of_lines - 1
46.      PARA CADA VALOR NO RANGE (0..n) FAÇA |i|
47.        next_solution.push((b_i(matrix, i) - sum(initial_solution, matrix, i, n)) / a_ij(matrix, i, i).to_f)
48.      FIM PARA CADA
49.
50.      // Calculando o erro de cada uma das incógnitas com a FUNÇÃO 'err_x_i'
51.      err_x_i = err_x_i(initial_solution, next_solution)
52.      // Caso o erro de uma das variáveis não atenda a condição estabelecida.
53.      SE err_x_i CONTÉM false 
54.        // Uma nova iteração é iniciada.
55.        jacobi(next_solution, matrix, ite)
56.      SENÃO
57.        // Caso a solução encontrada seja satisfatória
58.        // Retornando a solução estimada e o número de iterações
59.        RETORNE [next_solution, ite]
60.      FIM SE
61.    FIM FUNÇÃO
62.
63.  Fim algoritmo